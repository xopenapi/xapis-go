//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.3, generator: @autorest/go@4.0.0-preview.44)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package xapis

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

type Client struct {
	pl runtime.Pipeline
}

// NewClient creates a new instance of Client with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewClient(pl runtime.Pipeline) *Client {
	client := &Client{
		pl: pl,
	}
	return client
}

// CreateConfig - 创建配置
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// options - ClientCreateConfigOptions contains the optional parameters for the Client.CreateConfig method.
func (client *Client) CreateConfig(ctx context.Context, options *ClientCreateConfigOptions) (ClientCreateConfigResponse, error) {
	req, err := client.createConfigCreateRequest(ctx, options)
	if err != nil {
		return ClientCreateConfigResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientCreateConfigResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientCreateConfigResponse{}, runtime.NewResponseError(resp)
	}
	return client.createConfigHandleResponse(resp)
}

// createConfigCreateRequest creates the CreateConfig request.
func (client *Client) createConfigCreateRequest(ctx context.Context, options *ClientCreateConfigOptions) (*policy.Request, error) {
	urlPath := "/config/v1/configs"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// createConfigHandleResponse handles the CreateConfig response.
func (client *Client) createConfigHandleResponse(resp *http.Response) (ClientCreateConfigResponse, error) {
	result := ClientCreateConfigResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Config); err != nil {
		return ClientCreateConfigResponse{}, err
	}
	return result, nil
}

// CreateConfigGroup - 创建配置组
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// options - ClientCreateConfigGroupOptions contains the optional parameters for the Client.CreateConfigGroup method.
func (client *Client) CreateConfigGroup(ctx context.Context, options *ClientCreateConfigGroupOptions) (ClientCreateConfigGroupResponse, error) {
	req, err := client.createConfigGroupCreateRequest(ctx, options)
	if err != nil {
		return ClientCreateConfigGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientCreateConfigGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientCreateConfigGroupResponse{}, runtime.NewResponseError(resp)
	}
	return client.createConfigGroupHandleResponse(resp)
}

// createConfigGroupCreateRequest creates the CreateConfigGroup request.
func (client *Client) createConfigGroupCreateRequest(ctx context.Context, options *ClientCreateConfigGroupOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_groups"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// createConfigGroupHandleResponse handles the CreateConfigGroup response.
func (client *Client) createConfigGroupHandleResponse(resp *http.Response) (ClientCreateConfigGroupResponse, error) {
	result := ClientCreateConfigGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigGroup); err != nil {
		return ClientCreateConfigGroupResponse{}, err
	}
	return result, nil
}

// CreateConfigTemplate - 创建配置模版
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// options - ClientCreateConfigTemplateOptions contains the optional parameters for the Client.CreateConfigTemplate method.
func (client *Client) CreateConfigTemplate(ctx context.Context, options *ClientCreateConfigTemplateOptions) (ClientCreateConfigTemplateResponse, error) {
	req, err := client.createConfigTemplateCreateRequest(ctx, options)
	if err != nil {
		return ClientCreateConfigTemplateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientCreateConfigTemplateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientCreateConfigTemplateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createConfigTemplateHandleResponse(resp)
}

// createConfigTemplateCreateRequest creates the CreateConfigTemplate request.
func (client *Client) createConfigTemplateCreateRequest(ctx context.Context, options *ClientCreateConfigTemplateOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_templates"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// createConfigTemplateHandleResponse handles the CreateConfigTemplate response.
func (client *Client) createConfigTemplateHandleResponse(resp *http.Response) (ClientCreateConfigTemplateResponse, error) {
	result := ClientCreateConfigTemplateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplate); err != nil {
		return ClientCreateConfigTemplateResponse{}, err
	}
	return result, nil
}

// DeleteConfig - 删除配置
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置ID
// options - ClientDeleteConfigOptions contains the optional parameters for the Client.DeleteConfig method.
func (client *Client) DeleteConfig(ctx context.Context, id string, options *ClientDeleteConfigOptions) (ClientDeleteConfigResponse, error) {
	req, err := client.deleteConfigCreateRequest(ctx, id, options)
	if err != nil {
		return ClientDeleteConfigResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDeleteConfigResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientDeleteConfigResponse{}, runtime.NewResponseError(resp)
	}
	return ClientDeleteConfigResponse{}, nil
}

// deleteConfigCreateRequest creates the DeleteConfig request.
func (client *Client) deleteConfigCreateRequest(ctx context.Context, id string, options *ClientDeleteConfigOptions) (*policy.Request, error) {
	urlPath := "/config/v1/configs/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteConfigGroup - 删除配置组
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置组ID
// options - ClientDeleteConfigGroupOptions contains the optional parameters for the Client.DeleteConfigGroup method.
func (client *Client) DeleteConfigGroup(ctx context.Context, id string, options *ClientDeleteConfigGroupOptions) (ClientDeleteConfigGroupResponse, error) {
	req, err := client.deleteConfigGroupCreateRequest(ctx, id, options)
	if err != nil {
		return ClientDeleteConfigGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDeleteConfigGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientDeleteConfigGroupResponse{}, runtime.NewResponseError(resp)
	}
	return ClientDeleteConfigGroupResponse{}, nil
}

// deleteConfigGroupCreateRequest creates the DeleteConfigGroup request.
func (client *Client) deleteConfigGroupCreateRequest(ctx context.Context, id string, options *ClientDeleteConfigGroupOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_groups/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteConfigTemplate - 删除配置模板
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置模板ID
// options - ClientDeleteConfigTemplateOptions contains the optional parameters for the Client.DeleteConfigTemplate method.
func (client *Client) DeleteConfigTemplate(ctx context.Context, id string, options *ClientDeleteConfigTemplateOptions) (ClientDeleteConfigTemplateResponse, error) {
	req, err := client.deleteConfigTemplateCreateRequest(ctx, id, options)
	if err != nil {
		return ClientDeleteConfigTemplateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDeleteConfigTemplateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientDeleteConfigTemplateResponse{}, runtime.NewResponseError(resp)
	}
	return ClientDeleteConfigTemplateResponse{}, nil
}

// deleteConfigTemplateCreateRequest creates the DeleteConfigTemplate request.
func (client *Client) deleteConfigTemplateCreateRequest(ctx context.Context, id string, options *ClientDeleteConfigTemplateOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_templates/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetConfig - 查询配置
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置ID
// options - ClientGetConfigOptions contains the optional parameters for the Client.GetConfig method.
func (client *Client) GetConfig(ctx context.Context, id string, options *ClientGetConfigOptions) (ClientGetConfigResponse, error) {
	req, err := client.getConfigCreateRequest(ctx, id, options)
	if err != nil {
		return ClientGetConfigResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetConfigResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetConfigResponse{}, runtime.NewResponseError(resp)
	}
	return client.getConfigHandleResponse(resp)
}

// getConfigCreateRequest creates the GetConfig request.
func (client *Client) getConfigCreateRequest(ctx context.Context, id string, options *ClientGetConfigOptions) (*policy.Request, error) {
	urlPath := "/config/v1/configs/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getConfigHandleResponse handles the GetConfig response.
func (client *Client) getConfigHandleResponse(resp *http.Response) (ClientGetConfigResponse, error) {
	result := ClientGetConfigResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Config); err != nil {
		return ClientGetConfigResponse{}, err
	}
	return result, nil
}

// GetConfigByKey - 根据配置项查询配置
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// resourceID - 配置所属的资源ID
// key - 配置项
// options - ClientGetConfigByKeyOptions contains the optional parameters for the Client.GetConfigByKey method.
func (client *Client) GetConfigByKey(ctx context.Context, resourceID string, key string, options *ClientGetConfigByKeyOptions) (ClientGetConfigByKeyResponse, error) {
	req, err := client.getConfigByKeyCreateRequest(ctx, resourceID, key, options)
	if err != nil {
		return ClientGetConfigByKeyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetConfigByKeyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetConfigByKeyResponse{}, runtime.NewResponseError(resp)
	}
	return client.getConfigByKeyHandleResponse(resp)
}

// getConfigByKeyCreateRequest creates the GetConfigByKey request.
func (client *Client) getConfigByKeyCreateRequest(ctx context.Context, resourceID string, key string, options *ClientGetConfigByKeyOptions) (*policy.Request, error) {
	urlPath := "/config/v1/configs"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("resource_id", resourceID)
	reqQP.Set("key", key)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getConfigByKeyHandleResponse handles the GetConfigByKey response.
func (client *Client) getConfigByKeyHandleResponse(resp *http.Response) (ClientGetConfigByKeyResponse, error) {
	result := ClientGetConfigByKeyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Config); err != nil {
		return ClientGetConfigByKeyResponse{}, err
	}
	return result, nil
}

// GetConfigGroup - 查询配置组
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置组ID
// options - ClientGetConfigGroupOptions contains the optional parameters for the Client.GetConfigGroup method.
func (client *Client) GetConfigGroup(ctx context.Context, id string, options *ClientGetConfigGroupOptions) (ClientGetConfigGroupResponse, error) {
	req, err := client.getConfigGroupCreateRequest(ctx, id, options)
	if err != nil {
		return ClientGetConfigGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetConfigGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetConfigGroupResponse{}, runtime.NewResponseError(resp)
	}
	return client.getConfigGroupHandleResponse(resp)
}

// getConfigGroupCreateRequest creates the GetConfigGroup request.
func (client *Client) getConfigGroupCreateRequest(ctx context.Context, id string, options *ClientGetConfigGroupOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_groups/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getConfigGroupHandleResponse handles the GetConfigGroup response.
func (client *Client) getConfigGroupHandleResponse(resp *http.Response) (ClientGetConfigGroupResponse, error) {
	result := ClientGetConfigGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigGroup); err != nil {
		return ClientGetConfigGroupResponse{}, err
	}
	return result, nil
}

// GetConfigTemplate - 查询配置模板
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置模板ID
// options - ClientGetConfigTemplateOptions contains the optional parameters for the Client.GetConfigTemplate method.
func (client *Client) GetConfigTemplate(ctx context.Context, id string, options *ClientGetConfigTemplateOptions) (ClientGetConfigTemplateResponse, error) {
	req, err := client.getConfigTemplateCreateRequest(ctx, id, options)
	if err != nil {
		return ClientGetConfigTemplateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetConfigTemplateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetConfigTemplateResponse{}, runtime.NewResponseError(resp)
	}
	return client.getConfigTemplateHandleResponse(resp)
}

// getConfigTemplateCreateRequest creates the GetConfigTemplate request.
func (client *Client) getConfigTemplateCreateRequest(ctx context.Context, id string, options *ClientGetConfigTemplateOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_templates/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getConfigTemplateHandleResponse handles the GetConfigTemplate response.
func (client *Client) getConfigTemplateHandleResponse(resp *http.Response) (ClientGetConfigTemplateResponse, error) {
	result := ClientGetConfigTemplateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplate); err != nil {
		return ClientGetConfigTemplateResponse{}, err
	}
	return result, nil
}

// GetConfigTemplateByKey - 根据配置项查询配置模版
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// key - 配置项
// options - ClientGetConfigTemplateByKeyOptions contains the optional parameters for the Client.GetConfigTemplateByKey method.
func (client *Client) GetConfigTemplateByKey(ctx context.Context, key string, options *ClientGetConfigTemplateByKeyOptions) (ClientGetConfigTemplateByKeyResponse, error) {
	req, err := client.getConfigTemplateByKeyCreateRequest(ctx, key, options)
	if err != nil {
		return ClientGetConfigTemplateByKeyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetConfigTemplateByKeyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetConfigTemplateByKeyResponse{}, runtime.NewResponseError(resp)
	}
	return client.getConfigTemplateByKeyHandleResponse(resp)
}

// getConfigTemplateByKeyCreateRequest creates the GetConfigTemplateByKey request.
func (client *Client) getConfigTemplateByKeyCreateRequest(ctx context.Context, key string, options *ClientGetConfigTemplateByKeyOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_templates"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("key", key)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getConfigTemplateByKeyHandleResponse handles the GetConfigTemplateByKey response.
func (client *Client) getConfigTemplateByKeyHandleResponse(resp *http.Response) (ClientGetConfigTemplateByKeyResponse, error) {
	result := ClientGetConfigTemplateByKeyResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplate); err != nil {
		return ClientGetConfigTemplateByKeyResponse{}, err
	}
	return result, nil
}

// GetStorageTemporaryCredentials - 获取上传文件临时凭证
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// options - ClientGetStorageTemporaryCredentialsOptions contains the optional parameters for the Client.GetStorageTemporaryCredentials
// method.
func (client *Client) GetStorageTemporaryCredentials(ctx context.Context, options *ClientGetStorageTemporaryCredentialsOptions) (ClientGetStorageTemporaryCredentialsResponse, error) {
	req, err := client.getStorageTemporaryCredentialsCreateRequest(ctx, options)
	if err != nil {
		return ClientGetStorageTemporaryCredentialsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetStorageTemporaryCredentialsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetStorageTemporaryCredentialsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getStorageTemporaryCredentialsHandleResponse(resp)
}

// getStorageTemporaryCredentialsCreateRequest creates the GetStorageTemporaryCredentials request.
func (client *Client) getStorageTemporaryCredentialsCreateRequest(ctx context.Context, options *ClientGetStorageTemporaryCredentialsOptions) (*policy.Request, error) {
	urlPath := "/storage/v1/temporary_credentials"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Provider != nil {
		reqQP.Set("provider", string(*options.Provider))
	}
	if options != nil && options.Path != nil {
		reqQP.Set("path", *options.Path)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getStorageTemporaryCredentialsHandleResponse handles the GetStorageTemporaryCredentials response.
func (client *Client) getStorageTemporaryCredentialsHandleResponse(resp *http.Response) (ClientGetStorageTemporaryCredentialsResponse, error) {
	result := ClientGetStorageTemporaryCredentialsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StorageTemporaryCredentials); err != nil {
		return ClientGetStorageTemporaryCredentialsResponse{}, err
	}
	return result, nil
}

// UpdateConfig - 更新配置
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置ID
// options - ClientUpdateConfigOptions contains the optional parameters for the Client.UpdateConfig method.
func (client *Client) UpdateConfig(ctx context.Context, id string, body UpdateConfig, options *ClientUpdateConfigOptions) (ClientUpdateConfigResponse, error) {
	req, err := client.updateConfigCreateRequest(ctx, id, body, options)
	if err != nil {
		return ClientUpdateConfigResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientUpdateConfigResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientUpdateConfigResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateConfigHandleResponse(resp)
}

// updateConfigCreateRequest creates the UpdateConfig request.
func (client *Client) updateConfigCreateRequest(ctx context.Context, id string, body UpdateConfig, options *ClientUpdateConfigOptions) (*policy.Request, error) {
	urlPath := "/config/v1/configs/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// updateConfigHandleResponse handles the UpdateConfig response.
func (client *Client) updateConfigHandleResponse(resp *http.Response) (ClientUpdateConfigResponse, error) {
	result := ClientUpdateConfigResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Config); err != nil {
		return ClientUpdateConfigResponse{}, err
	}
	return result, nil
}

// UpdateConfigGroup - 更新配置组
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置组ID
// options - ClientUpdateConfigGroupOptions contains the optional parameters for the Client.UpdateConfigGroup method.
func (client *Client) UpdateConfigGroup(ctx context.Context, id string, body UpdateConfigGroup, options *ClientUpdateConfigGroupOptions) (ClientUpdateConfigGroupResponse, error) {
	req, err := client.updateConfigGroupCreateRequest(ctx, id, body, options)
	if err != nil {
		return ClientUpdateConfigGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientUpdateConfigGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientUpdateConfigGroupResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateConfigGroupHandleResponse(resp)
}

// updateConfigGroupCreateRequest creates the UpdateConfigGroup request.
func (client *Client) updateConfigGroupCreateRequest(ctx context.Context, id string, body UpdateConfigGroup, options *ClientUpdateConfigGroupOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_groups/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// updateConfigGroupHandleResponse handles the UpdateConfigGroup response.
func (client *Client) updateConfigGroupHandleResponse(resp *http.Response) (ClientUpdateConfigGroupResponse, error) {
	result := ClientUpdateConfigGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigGroup); err != nil {
		return ClientUpdateConfigGroupResponse{}, err
	}
	return result, nil
}

// UpdateConfigTemplate - 更新配置模板
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 0.0.1
// id - 配置模板ID
// options - ClientUpdateConfigTemplateOptions contains the optional parameters for the Client.UpdateConfigTemplate method.
func (client *Client) UpdateConfigTemplate(ctx context.Context, id string, body UpdateConfigTemplate, options *ClientUpdateConfigTemplateOptions) (ClientUpdateConfigTemplateResponse, error) {
	req, err := client.updateConfigTemplateCreateRequest(ctx, id, body, options)
	if err != nil {
		return ClientUpdateConfigTemplateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientUpdateConfigTemplateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientUpdateConfigTemplateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateConfigTemplateHandleResponse(resp)
}

// updateConfigTemplateCreateRequest creates the UpdateConfigTemplate request.
func (client *Client) updateConfigTemplateCreateRequest(ctx context.Context, id string, body UpdateConfigTemplate, options *ClientUpdateConfigTemplateOptions) (*policy.Request, error) {
	urlPath := "/config/v1/config_templates/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// updateConfigTemplateHandleResponse handles the UpdateConfigTemplate response.
func (client *Client) updateConfigTemplateHandleResponse(resp *http.Response) (ClientUpdateConfigTemplateResponse, error) {
	result := ClientUpdateConfigTemplateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplate); err != nil {
		return ClientUpdateConfigTemplateResponse{}, err
	}
	return result, nil
}

