/*
xapi services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xapis

import (
	"encoding/json"
	"time"
)

// ConfigGroup struct for ConfigGroup
type ConfigGroup struct {
	// 配置组ID
	Id string `json:"id"`
	// 配置组名称
	Name string `json:"name"`
	// 创建时间
	CreatedAt time.Time `json:"created_at"`
	// 最后更新时间
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewConfigGroup instantiates a new ConfigGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigGroup(id string, name string, createdAt time.Time) *ConfigGroup {
	this := ConfigGroup{}
	this.Id = id
	this.Name = name
	this.CreatedAt = createdAt
	return &this
}

// NewConfigGroupWithDefaults instantiates a new ConfigGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigGroupWithDefaults() *ConfigGroup {
	this := ConfigGroup{}
	return &this
}

// GetId returns the Id field value
func (o *ConfigGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConfigGroup) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConfigGroup) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ConfigGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConfigGroup) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConfigGroup) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ConfigGroup) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ConfigGroup) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ConfigGroup) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ConfigGroup) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGroup) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ConfigGroup) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ConfigGroup) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ConfigGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableConfigGroup struct {
	value *ConfigGroup
	isSet bool
}

func (v NullableConfigGroup) Get() *ConfigGroup {
	return v.value
}

func (v *NullableConfigGroup) Set(val *ConfigGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigGroup(val *ConfigGroup) *NullableConfigGroup {
	return &NullableConfigGroup{value: val, isSet: true}
}

func (v NullableConfigGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


