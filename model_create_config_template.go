/*
xapi services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xapis

import (
	"encoding/json"
)

// CreateConfigTemplate struct for CreateConfigTemplate
type CreateConfigTemplate struct {
	// 所属的配置组ID
	GroupId *string `json:"group_id,omitempty"`
	// 配置项
	Key string `json:"key"`
	// 配置内容
	Value map[string]interface{} `json:"value"`
}

// NewCreateConfigTemplate instantiates a new CreateConfigTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateConfigTemplate(key string, value map[string]interface{}) *CreateConfigTemplate {
	this := CreateConfigTemplate{}
	this.Key = key
	this.Value = value
	return &this
}

// NewCreateConfigTemplateWithDefaults instantiates a new CreateConfigTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateConfigTemplateWithDefaults() *CreateConfigTemplate {
	this := CreateConfigTemplate{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *CreateConfigTemplate) GetGroupId() string {
	if o == nil || isNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConfigTemplate) GetGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.GroupId) {
    return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *CreateConfigTemplate) HasGroupId() bool {
	if o != nil && !isNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *CreateConfigTemplate) SetGroupId(v string) {
	o.GroupId = &v
}

// GetKey returns the Key field value
func (o *CreateConfigTemplate) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CreateConfigTemplate) GetKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CreateConfigTemplate) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *CreateConfigTemplate) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CreateConfigTemplate) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *CreateConfigTemplate) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o CreateConfigTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCreateConfigTemplate struct {
	value *CreateConfigTemplate
	isSet bool
}

func (v NullableCreateConfigTemplate) Get() *CreateConfigTemplate {
	return v.value
}

func (v *NullableCreateConfigTemplate) Set(val *CreateConfigTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateConfigTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateConfigTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateConfigTemplate(val *CreateConfigTemplate) *NullableCreateConfigTemplate {
	return &NullableCreateConfigTemplate{value: val, isSet: true}
}

func (v NullableCreateConfigTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateConfigTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


