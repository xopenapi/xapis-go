/*
xapi services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xapis

import (
	"encoding/json"
	"fmt"
)

// SMSProvider 短信服务商
type SMSProvider string

// List of SMSProvider
const (
	QCLOUD SMSProvider = "qcloud"
	ALIYUN SMSProvider = "aliyun"
)

// All allowed values of SMSProvider enum
var AllowedSMSProviderEnumValues = []SMSProvider{
	"qcloud",
	"aliyun",
}

func (v *SMSProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SMSProvider(value)
	for _, existing := range AllowedSMSProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SMSProvider", value)
}

// NewSMSProviderFromValue returns a pointer to a valid SMSProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSMSProviderFromValue(v string) (*SMSProvider, error) {
	ev := SMSProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SMSProvider: valid values are %v", v, AllowedSMSProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SMSProvider) IsValid() bool {
	for _, existing := range AllowedSMSProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SMSProvider value
func (v SMSProvider) Ptr() *SMSProvider {
	return &v
}

type NullableSMSProvider struct {
	value *SMSProvider
	isSet bool
}

func (v NullableSMSProvider) Get() *SMSProvider {
	return v.value
}

func (v *NullableSMSProvider) Set(val *SMSProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSProvider(val *SMSProvider) *NullableSMSProvider {
	return &NullableSMSProvider{value: val, isSet: true}
}

func (v NullableSMSProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

