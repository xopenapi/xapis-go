/*
xapi services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xapis

import (
	"encoding/json"
	"fmt"
)

// StorageProvider 云存储服务商
type StorageProvider string

// List of StorageProvider
const (
	QCLOUD StorageProvider = "qcloud"
	ALIYUN StorageProvider = "aliyun"
)

// All allowed values of StorageProvider enum
var AllowedStorageProviderEnumValues = []StorageProvider{
	"qcloud",
	"aliyun",
}

func (v *StorageProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageProvider(value)
	for _, existing := range AllowedStorageProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageProvider", value)
}

// NewStorageProviderFromValue returns a pointer to a valid StorageProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageProviderFromValue(v string) (*StorageProvider, error) {
	ev := StorageProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageProvider: valid values are %v", v, AllowedStorageProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageProvider) IsValid() bool {
	for _, existing := range AllowedStorageProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageProvider value
func (v StorageProvider) Ptr() *StorageProvider {
	return &v
}

type NullableStorageProvider struct {
	value *StorageProvider
	isSet bool
}

func (v NullableStorageProvider) Get() *StorageProvider {
	return v.value
}

func (v *NullableStorageProvider) Set(val *StorageProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageProvider(val *StorageProvider) *NullableStorageProvider {
	return &NullableStorageProvider{value: val, isSet: true}
}

func (v NullableStorageProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

