//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.3, generator: @autorest/go@4.0.0-preview.44)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package xapis

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type Config.
func (c Config) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", c.CreatedAt)
	populate(objectMap, "group_id", c.GroupID)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "key", c.Key)
	populate(objectMap, "resource_id", c.ResourceID)
	populate(objectMap, "template_id", c.TemplateID)
	populateTimeRFC3339(objectMap, "updated_at", c.UpdatedAt)
	populate(objectMap, "value", &c.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Config.
func (c *Config) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
				err = unpopulateTimeRFC3339(val, "CreatedAt", &c.CreatedAt)
				delete(rawMsg, key)
		case "group_id":
				err = unpopulate(val, "GroupID", &c.GroupID)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, "ID", &c.ID)
				delete(rawMsg, key)
		case "key":
				err = unpopulate(val, "Key", &c.Key)
				delete(rawMsg, key)
		case "resource_id":
				err = unpopulate(val, "ResourceID", &c.ResourceID)
				delete(rawMsg, key)
		case "template_id":
				err = unpopulate(val, "TemplateID", &c.TemplateID)
				delete(rawMsg, key)
		case "updated_at":
				err = unpopulateTimeRFC3339(val, "UpdatedAt", &c.UpdatedAt)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &c.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ConfigGroup.
func (c ConfigGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", c.CreatedAt)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "name", c.Name)
	populateTimeRFC3339(objectMap, "updated_at", c.UpdatedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConfigGroup.
func (c *ConfigGroup) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
				err = unpopulateTimeRFC3339(val, "CreatedAt", &c.CreatedAt)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, "ID", &c.ID)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &c.Name)
				delete(rawMsg, key)
		case "updated_at":
				err = unpopulateTimeRFC3339(val, "UpdatedAt", &c.UpdatedAt)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ConfigTemplate.
func (c ConfigTemplate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "created_at", c.CreatedAt)
	populate(objectMap, "group_id", c.GroupID)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "key", c.Key)
	populateTimeRFC3339(objectMap, "updated_at", c.UpdatedAt)
	populate(objectMap, "value", &c.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConfigTemplate.
func (c *ConfigTemplate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created_at":
				err = unpopulateTimeRFC3339(val, "CreatedAt", &c.CreatedAt)
				delete(rawMsg, key)
		case "group_id":
				err = unpopulate(val, "GroupID", &c.GroupID)
				delete(rawMsg, key)
		case "id":
				err = unpopulate(val, "ID", &c.ID)
				delete(rawMsg, key)
		case "key":
				err = unpopulate(val, "Key", &c.Key)
				delete(rawMsg, key)
		case "updated_at":
				err = unpopulateTimeRFC3339(val, "UpdatedAt", &c.UpdatedAt)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &c.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CreateConfig.
func (c CreateConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "group_id", c.GroupID)
	populate(objectMap, "key", c.Key)
	populate(objectMap, "resource_id", c.ResourceID)
	populate(objectMap, "template_id", c.TemplateID)
	populate(objectMap, "value", &c.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateConfig.
func (c *CreateConfig) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "group_id":
				err = unpopulate(val, "GroupID", &c.GroupID)
				delete(rawMsg, key)
		case "key":
				err = unpopulate(val, "Key", &c.Key)
				delete(rawMsg, key)
		case "resource_id":
				err = unpopulate(val, "ResourceID", &c.ResourceID)
				delete(rawMsg, key)
		case "template_id":
				err = unpopulate(val, "TemplateID", &c.TemplateID)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &c.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CreateConfigGroup.
func (c CreateConfigGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", c.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateConfigGroup.
func (c *CreateConfigGroup) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
				err = unpopulate(val, "Name", &c.Name)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CreateConfigTemplate.
func (c CreateConfigTemplate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "group_id", c.GroupID)
	populate(objectMap, "key", c.Key)
	populate(objectMap, "value", &c.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateConfigTemplate.
func (c *CreateConfigTemplate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "group_id":
				err = unpopulate(val, "GroupID", &c.GroupID)
				delete(rawMsg, key)
		case "key":
				err = unpopulate(val, "Key", &c.Key)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &c.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Error.
func (e Error) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "param", e.Param)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Error.
func (e *Error) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
				err = unpopulate(val, "Code", &e.Code)
				delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &e.Message)
				delete(rawMsg, key)
		case "param":
				err = unpopulate(val, "Param", &e.Param)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StorageTemporaryCredentials.
func (s StorageTemporaryCredentials) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bucket", s.Bucket)
	populate(objectMap, "cdn", s.Cdn)
	populate(objectMap, "credentials", &s.Credentials)
	populate(objectMap, "provider", s.Provider)
	populate(objectMap, "region", s.Region)
	populate(objectMap, "url", s.URL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StorageTemporaryCredentials.
func (s *StorageTemporaryCredentials) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "bucket":
				err = unpopulate(val, "Bucket", &s.Bucket)
				delete(rawMsg, key)
		case "cdn":
				err = unpopulate(val, "Cdn", &s.Cdn)
				delete(rawMsg, key)
		case "credentials":
				err = unpopulate(val, "Credentials", &s.Credentials)
				delete(rawMsg, key)
		case "provider":
				err = unpopulate(val, "Provider", &s.Provider)
				delete(rawMsg, key)
		case "region":
				err = unpopulate(val, "Region", &s.Region)
				delete(rawMsg, key)
		case "url":
				err = unpopulate(val, "URL", &s.URL)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UpdateConfig.
func (u UpdateConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "group_id", u.GroupID)
	populate(objectMap, "key", u.Key)
	populate(objectMap, "resource_id", u.ResourceID)
	populate(objectMap, "template_id", u.TemplateID)
	populate(objectMap, "value", &u.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateConfig.
func (u *UpdateConfig) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "group_id":
				err = unpopulate(val, "GroupID", &u.GroupID)
				delete(rawMsg, key)
		case "key":
				err = unpopulate(val, "Key", &u.Key)
				delete(rawMsg, key)
		case "resource_id":
				err = unpopulate(val, "ResourceID", &u.ResourceID)
				delete(rawMsg, key)
		case "template_id":
				err = unpopulate(val, "TemplateID", &u.TemplateID)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &u.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UpdateConfigGroup.
func (u UpdateConfigGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", u.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateConfigGroup.
func (u *UpdateConfigGroup) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
				err = unpopulate(val, "Name", &u.Name)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UpdateConfigTemplate.
func (u UpdateConfigTemplate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "group_id", u.GroupID)
	populate(objectMap, "key", u.Key)
	populate(objectMap, "value", &u.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateConfigTemplate.
func (u *UpdateConfigTemplate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "group_id":
				err = unpopulate(val, "GroupID", &u.GroupID)
				delete(rawMsg, key)
		case "key":
				err = unpopulate(val, "Key", &u.Key)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &u.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}

